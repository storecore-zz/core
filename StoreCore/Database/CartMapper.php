<?php
namespace StoreCore\Database;

/**
 * Cart Mapper
 *
 * The cart mapper maps a cart to an order, if the order exists.  This mapping
 * mechanism allows for persistent carts.  A unique key, that is shared between
 * clients and servers, unlocks a previously saved order.
 *
 * @author    Ward van der Put <Ward.van.der.Put@gmail.com>
 * @copyright Copyright (c) 2015 StoreCore
 * @license   http://www.gnu.org/licenses/gpl.html GNU General Public License
 * @package   StoreCore\Core
 * @version   0.1.0-alpha.1
 */
class CartMapper extends \StoreCore\Database\AbstractModel
{
    const VERSION = '0.1.0-alpha.1';

    /**
     * Fetch an order by its unique token.
     *
     * @param string $token
     *   Unique string generated by \StoreCore\Database\Order::getToken().
     *
     * @return \StoreCore\Database\Order|bool|null
     *   Returns an Order object or null if the order does not exist.  This
     *   method may return false on a bad token or a token mismatch.
     */
    public function getOrder($token)
    {
        if (!is_string($token)) {
            return false;
        }

        $token = base64_decode($token, true);
        if ($token === false) {
            return false;
        }

        $token = json_decode($token, false, 2);
        if ($token === null) {
            return false;
        }

        /*
         * Current logic:
         *
         * - The cart token array consists of three elements.
         * - The first element [0] is an Order class version ID.
         * - The second element [1] is a UUID() CHAR(36) string.
         * - The third element [2] is a random CHAR(64) string.
         */
        if (count($token) !== 3) {
            return false;
        }

        if (!is_string($token[1]) || strlen($token[1]) !== 36) {
            return false;
        }

        if (!is_string($token[2]) || strlen($token[2]) !== 64) {
            return false;
        }

        /*
         * Note that the WHERE clause order must match the combined
         * table INDEX (cart_uuid, cart_rand):
         * 
         *     SELECT COUNT(*)
         *       FROM sc_orders 
         *      WHERE cart_uuid = :cart_uuid AND cart_rand = :cart_rand
         *
         *     SELECT order_id, store_id, customer_id
         *       FROM sc_orders
         *      WHERE cart_uuid = :cart_uuid AND cart_rand = :cart_rand
         */
        $stmt = $this->Connection->prepare('SELECT COUNT(*) FROM sc_orders WHERE cart_uuid = :cart_uuid AND cart_rand = :cart_rand');
        $stmt->bindParam(':cart_uuid', $token[1], \PDO::PARAM_STR);
        $stmt->bindParam(':cart_rand', $token[2], \PDO::PARAM_STR);
        if ($stmt->execute()) {
            $number_of_rows = $stmt->fetchColumn();
            if ($number_of_rows != 1) {
                return null;
            }

            $order = new \StoreCore\Database\Order($this->Registry);
            $stmt = $this->Connection->prepare('SELECT order_id, store_id, customer_id FROM sc_orders WHERE cart_uuid = :cart_uuid AND cart_rand = :cart_rand');
            $stmt->bindParam(':cart_uuid', $token[1], \PDO::PARAM_STR);
            $stmt->bindParam(':cart_rand', $token[2], \PDO::PARAM_STR);
            $stmt->execute();
            $row = $stmt->fetch(\PDO::FETCH_ASSOC);
            $order->setOrderID($row['order_id']);
            $order->setStoreID($row['store_id']);
            $order->setCustomerID($row['customer_id']);
            return $order;
        }

        return false;
    }
}
