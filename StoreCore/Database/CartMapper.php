<?php
namespace StoreCore\Database;

/**
 * Cart Mapper
 *
 * The cart mapper maps a cart to an order, if the order exists.  This mapping
 * mechanism allows for persistent carts.  A unique key, that is shared between
 * clients and servers, unlocks a previously saved order.
 *
 * @author    Ward van der Put <Ward.van.der.Put@storecore.org>
 * @copyright Copyright © 2015-2018 StoreCore™
 * @license   http://www.gnu.org/licenses/gpl.html GNU General Public License
 * @package   StoreCore\Core
 * @version   0.1.0
 */
class CartMapper extends \StoreCore\Database\AbstractModel
{
    const VERSION = '0.1.0';

    /**
     * Fetch an order by its unique shopping cart identifier token.
     *
     * @param string $encoded_cart_id
     *   Unique string generated by \StoreCore\Types\CartID::encode() or a
     *   string conversion through \StoreCore\Types\CartID::__toString().
     *
     * @return \StoreCore\Database\Order|null
     *   Returns an Order object or null if the order does not exist.  This
     *   method will return false on a bad token or a token mismatch.
     */
    public function getOrder($encoded_cart_id)
    {
        if (!is_string($encoded_cart_id) || empty($encoded_cart_id)) {
            return false;
        }

        $cart_id = new \StoreCore\Types\CartID();
        if ($cart_id->decode($encoded_cart_id) !== true) {
            return false;
        }

        $stmt = $this->Database->prepare('SELECT order_id, store_id, customer_id FROM sc_orders WHERE cart_uuid = :cart_uuid AND cart_rand = :cart_rand');
        $stmt->bindParam(':cart_uuid', $cart_id->getUUID(), \PDO::PARAM_STR);
        $stmt->bindParam(':cart_rand', $cart_id->getToken(), \PDO::PARAM_STR);
        if ($stmt->execute() == false) {
            return false;
        }

        $row = $stmt->fetch(\PDO::FETCH_ASSOC);
        $stmt = null;
        if ($row == false) {
            return null;
        }

        $order = new \StoreCore\Database\Order($this->Registry);
        $order->setOrderID($row['order_id']);
        $order->setStoreID(new \StoreCore\Types\StoreID($row['store_id']));
        $order->setCustomerID($row['customer_id']);

        return $order;
    }
}
