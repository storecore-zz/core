(function() { var nativeAddAll = Cache.prototype.addAll; var userAgent = navigator.userAgent.match(/(Firefox|Chrome)\/(\d+\.)/); if (userAgent) { var agent = userAgent[1]; var version = parseInt(userAgent[2]); } if (nativeAddAll && (!userAgent || (agent === 'Firefox' && version >= 46) || (agent === 'Chrome'  && version >= 50))) { return; } Cache.prototype.addAll = function addAll(requests) { var cache = this; function NetworkError(message) { this.name = 'NetworkError'; this.code = 19; this.message = message; } NetworkError.prototype = Object.create(Error.prototype); return Promise.resolve().then(function() { if (arguments.length < 1) throw new TypeError(); var sequence = []; requests = requests.map(function(request) { if (request instanceof Request) { return request; } else { return String(request); } }); return Promise.all( requests.map(function(request) { if (typeof request === 'string') { request = new Request(request); } var scheme = new URL(request.url).protocol; if (scheme !== 'http:' && scheme !== 'https:') { throw new NetworkError("Invalid scheme"); } return fetch(request.clone()); }) ); }).then(function(responses) { if (responses.some(function(response) { return !response.ok; })) { throw new NetworkError('Incorrect response status'); } return Promise.all( responses.map(function(response, i) { return cache.put(requests[i], response); }) ); }).then(function() { return undefined; }); }; Cache.prototype.add = function add(request) { return this.addAll([request]); }; }()); 
